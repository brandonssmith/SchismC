; Console Demo Application - Generated by SchismC
; Demonstrates function support with console output

.data
    hello_msg db "Hello from SchismC Functions!", 13, 10, 0
    world_msg db "World function returns: ", 0
    hello_msg2 db "Hello function returns: ", 0
    newline db 13, 10, 0
    result_msg db "Combined result: ", 0

.code
    extrn ExitProcess:PROC
    extrn GetStdHandle:PROC
    extrn WriteConsoleA:PROC

; Our generated functions
hello PROC
    ; Function prologue
    push rbp        ; Save caller's frame pointer
    mov rbp, rsp    ; Set up new frame pointer
    sub rsp, 32h    ; Allocate local space
    
    ; Function body
    mov rax, 42    ; Return value
    
    ; Function epilogue
    mov rsp, rbp    ; Restore stack pointer
    pop rbp         ; Restore caller's frame pointer
    ret             ; Return to caller
hello ENDP

world PROC
    ; Function prologue
    push rbp        ; Save caller's frame pointer
    mov rbp, rsp    ; Set up new frame pointer
    sub rsp, 32h    ; Allocate local space
    
    ; Function body
    mov rax, 24    ; Return value
    
    ; Function epilogue
    mov rsp, rbp    ; Restore stack pointer
    pop rbp         ; Restore caller's frame pointer
    ret             ; Return to caller
world ENDP

; Helper function to print string
print_string PROC
    push rbp
    mov rbp, rsp
    sub rsp, 20h
    
    ; Get stdout handle
    mov rcx, -11    ; STD_OUTPUT_HANDLE
    call GetStdHandle
    
    ; Write to console
    mov rcx, rax    ; Handle
    mov rdx, [rbp+10h]  ; String pointer
    mov r8, [rbp+18h]   ; String length
    mov r9, 0           ; Reserved
    push 0              ; lpReserved
    call WriteConsoleA
    
    mov rsp, rbp
    pop rbp
    ret
print_string ENDP

; Main function
main PROC
    push rbp
    mov rbp, rsp
    sub rsp, 20h
    
    ; Print welcome message
    lea rdx, hello_msg
    mov r8, 28
    call print_string
    
    ; Call our functions
    call hello
    mov [rbp-8], rax    ; Store hello result
    
    call world
    mov [rbp-16], rax   ; Store world result
    
    ; Print hello result
    lea rdx, hello_msg2
    mov r8, 24
    call print_string
    
    ; Print world result
    lea rdx, world_msg
    mov r8, 24
    call print_string
    
    ; Calculate combined result
    mov rax, [rbp-8]    ; hello result
    add rax, [rbp-16]   ; add world result
    
    ; Print combined result message
    lea rdx, result_msg
    mov r8, 17
    call print_string
    
    ; Print newline
    lea rdx, newline
    mov r8, 2
    call print_string
    
    ; Exit with combined result
    mov rcx, rax
    call ExitProcess
    
    mov rsp, rbp
    pop rbp
    ret
main ENDP

END main

